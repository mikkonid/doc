<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>NurApi Methods</title><meta name="Title" content="Methods" /><meta name="Help.Id" content="Methods.T:NurApiDotNet.NurApi" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="NurApiDotNet" /><meta name="guid" content="160732b6-522b-b1b0-9323-903a9d357aaf" /><meta name="tocFile" content="../toc/ID0EB0A.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Nurapi Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Nur<wbr />Api Methods</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDADASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="132ec017-83f8-7e95-b726-f792aea8d6f9.htm">AccBarcodeCancel</a></td><td>
            Cancel barcode scan immediately.
            </td></tr><tr><td><a href="0b76b56c-f70c-d630-11dd-31b20d6130c7.htm">AccBarcodeStart</a></td><td>
            Start scan for barcode reader engine<br />
            This function only start barcode reading. Use  for receiving scan results.
            </td></tr><tr><td><a href="d38412ed-40e7-2b1e-29ba-88c9b5b95d92.htm">AccBeep</a></td><td>
            Generate simple beep sound for accessory device
            </td></tr><tr><td><a href="1c2a4eae-d86d-bc48-f2da-98d432d8455d.htm">AccClearBLEPasskey</a></td><td>
             Clear current passkey from device
            </td></tr><tr><td><a href="cdd7a96f-dd50-55c2-7a9b-bbf059db537e.htm">AccClearPairingData</a></td><td>
            Clear pairing information from accessory device <br />
            Note: if pairings exist then accessory device will be rebooted.
            </td></tr><tr><td><a href="b1e00fcb-cd28-083c-299e-20e87ad3fa0b.htm">AccGetBatteryInfo</a></td><td>
            Get battery info of accessory
            </td></tr><tr><td><a href="886197f4-7796-3d73-4fbb-8a7b206d6893.htm">AccGetBLEPasskey</a></td><td>
             Get current BLE passkey
            </td></tr><tr><td><a href="33c641f8-1e6a-cdcd-0566-f63eb6953a9c.htm">AccGetConfig</a></td><td>
            Get configuration from accessory.
            </td></tr><tr><td><a href="1639c058-5c8b-6fd1-aa5b-324e21475f10.htm">AccGetConnectionInfo</a></td><td>
            Get information about the connection
            </td></tr><tr><td><a href="cfb7a8e9-a175-bc4c-31e3-0ab83c263070.htm">AccGetFwInfo</a></td><td>
            Get information about the accessory device
            </td></tr><tr><td><a href="feb0c9a7-186c-3be4-ffa6-31510efc9ec2.htm">AccGetHIDMode</a></td><td>
            Get current HID mode
            </td></tr><tr><td><a href="fe46d612-17b2-bca6-a562-d2831820504e.htm">AccGetHwHealth</a></td><td>
            Get information about HW health
            </td></tr><tr><td><a href="03c492f5-01ff-aa14-ab3e-1c13c7591119.htm">AccGetModelInfo</a></td><td>
            detailed info about model
            </td></tr><tr><td><a href="a3fad9e9-ea40-8e11-4ed9-caed6c84db00.htm">AccGetPairingMode</a></td><td>
            Get current Pairing mode
            </td></tr><tr><td><a href="6dd3ac69-f556-d681-b642-b22067407a8a.htm">AccGetWirelessChargeStatus</a></td><td>
            Get wireless charge status.
            </td></tr><tr><td><a href="99480bb4-7ba5-0174-23f7-086071531c68.htm">AccImagerAim</a></td><td>
            Set Imager aimer on/off
            </td></tr><tr><td><a href="60e54ad2-8f9f-183d-f237-c815414e44d5.htm">AccImagerCmd</a></td><td>
            Send configuring command to Imager
            </td></tr><tr><td><a href="6818de29-aba7-bdd7-838b-4c125f3556e8.htm">AccImagerSaveConfig</a></td><td>
            After sending configuration to imager using <a href="60e54ad2-8f9f-183d-f237-c815414e44d5.htm">AccImagerCmd(NurApi<span id="LST5C3DD375_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ImagerType, String)</a>, settings are ready to use but next power down causes settings to lost.<br />
            Therefore, it’s important to save settings to volatile memory of imager.
            </td></tr><tr><td><a href="c8e92744-e35b-f52d-b364-0105a55e2073.htm">AccPowerOff</a></td><td>
            Power off accessory.<br />
            Note: Accessory will be disconnect.
            </td></tr><tr><td><a href="84abcf75-17a7-bea1-2d65-317cc2c8c303.htm">AccRestart</a></td><td>
            Restart accessory.<br />
            Note: Accessory will be disconnect.
            </td></tr><tr><td><a href="8ade8f14-d76d-8b62-5617-cf8458975b2d.htm">AccSensorEnumerate</a></td><td>
            Get all connected sensors
            </td></tr><tr><td><a href="22effca8-a521-46f2-821e-436091ded604.htm">AccSensorGetConfig</a></td><td>
            Get current sensor configuration.
            </td></tr><tr><td><a href="969a06bb-490b-72ef-d331-ada40969fdae.htm">AccSensorGetFilter</a></td><td>
            Get filter settings of sensor
            </td></tr><tr><td><a href="fc34df52-c754-8578-9617-d0e42cfa9734.htm">AccSensorGetValue</a></td><td>
             Get sensor value
            </td></tr><tr><td><a href="f8b286f7-f350-7240-53f8-b5c3d808ea79.htm">AccSensorSetConfig</a></td><td>
            Change sensor configuration (currently only the mode can be changed).<br />
            cfg.source is used to identify the sensor.
            </td></tr><tr><td><a href="76381ab0-2ce6-1a35-73ff-7ab2db1ce8cc.htm">AccSensorSetFilter</a></td><td>
            Change filter of sensor.
            </td></tr><tr><td><a href="c31b4d82-bf17-51ff-3dfc-4257476ecf9e.htm">AccSetBLEPasskey</a></td><td>
            Set 6-digit BLE passkey (digits 0-9 only)
            </td></tr><tr><td><a href="1e2a530f-e700-a708-f4e4-fedda1ba7c2e.htm">AccSetConfig</a></td><td>
            Set accessory configuration. 
            </td></tr><tr><td><a href="ee0b06c4-ddfb-bbc7-8fc2-345f969ad0ee.htm">AccSetHIDMode</a></td><td>
            Set <a href="90d928ee-e349-788f-9b4e-7588c384c0a5.htm">NurApi<span id="LST5C3DD375_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>HIDMode</a><br />
            Note: Accessory restart required after set HID mode.
            </td></tr><tr><td><a href="442254bf-4c2c-0cb2-ccb6-4b8611e92cc0.htm">AccSetLedOp</a></td><td>
             Sets the LED operation mode.
            </td></tr><tr><td><a href="e3bedf48-6730-3f40-e4f1-6741773f7847.htm">AccSetPairingMode</a></td><td>
            Set <a href="63037dd3-b06d-aee4-aa8c-d94835512d7d.htm">NurApi<span id="LST5C3DD375_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>PairingMode</a><br />
            Note: Accessory restart required after set PairingMode mode.
            </td></tr><tr><td><a href="1c8be964-69f8-46cc-c7ae-0719074171c3.htm">AccSetWirelessCharge</a></td><td>
            Set wireless charge on/off
            </td></tr><tr><td><a href="f7b3d7b1-a8fd-8a79-c501-720612e420da.htm">AccVibrate</a></td><td>
            Use vibra of accessory device<br />
            Parameter exception thrown if vibratingTime * count exceeds 2000ms
            </td></tr><tr><td><a href="f98cc681-bc7e-2757-2c14-db433f4f2e73.htm">AllocAuthParam</a></td><td>
            Basic allocation of authentication parameters.
            </td></tr><tr><td><a href="32814f70-5ea0-4e2f-0caa-caea7b4a6946.htm">Beep<span id="LST5C3DD375_3" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Generate beep sound if beeper device available
            </td></tr><tr><td><a href="de4fc359-83d0-9cf3-ce51-6be32920e695.htm">Beep(Int32, Int32, Int32)</a></td><td>
            Generate beep sound if beeper device available
            </td></tr><tr><td><a href="8f947ea1-a3a0-93fe-cb50-b89cec0532c5.htm">BinToHexString</a></td><td>
            Converts byte array to Hex strings and appends delimiter string to end
            </td></tr><tr><td><a href="a689baa1-8532-63f4-b61d-aed2a9971014.htm">BitLenToByteLen</a></td><td>
            Get required byte length for given number of bits.
            </td></tr><tr><td><a href="049af90f-1376-0cf0-1921-33bceec089b9.htm">BlockPermalock</a></td><td>
            Do BlockPermalock without selecting any tag.
            Assume one tag in field.
            </td></tr><tr><td><a href="59bbc40a-ccbf-3ec0-3830-b774266ec47b.htm">BlockPermalockByEPC</a></td><td>
            Do BlockPermalock by selecting the tag by its EPC.
            </td></tr><tr><td><a href="305c9e15-1851-2f62-819a-2c4486063a39.htm">BlockPermalockSingulated</a></td><td>
            do BlockPermalock by selecting the tag with specific singulation data.
            </td></tr><tr><td><a href="26006dc2-846f-a6ff-0e2d-06146ccca2a9.htm">BlockWriteByEPC</a></td><td>
            Write data to tag by EPC singulation using specific block write.
            </td></tr><tr><td><a href="bbc47ff3-f79b-22ba-f096-d51fd10624a2.htm">BlockWriteSingulatedTag(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_4" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_6" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte)</a></td><td>
            Write data to tag with specific singulation using specific block write.
            The Selection mask is assumed to be in byte length i.e. divisible by 8.
            </td></tr><tr><td><a href="e3e12ee1-415f-5d97-95a9-1154d6538af3.htm">BlockWriteSingulatedTag(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_8" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_9" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_10" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Byte)</a></td><td>
            Write data to tag with specific singulation using specific block write.
            </td></tr><tr><td><a href="440d1fd4-87e9-82d9-0f17-ce3f3da120ef.htm">BlockWriteTag</a></td><td>
            Write data to tag with no singulation using specific block write.
            </td></tr><tr><td><a href="17f3270a-d446-4ffd-f8fb-2778e16386b9.htm">BuildCustomHoptable</a></td><td>
            Build custom frequency hoptable
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="0dc655c5-2616-e62a-eab6-e2e49e16827a.htm">CancelOperation</a></td><td>
            Cancel all pending/queued NurApi operations.
            </td></tr><tr><td><a href="76a3c545-f8bd-fa61-3b30-5fd3fce74074.htm">ClearIdBuffer</a></td><td>
            Clear the module's internal ID buffer.		
            </td></tr><tr><td><a href="b1c02403-a4a4-9b09-0cb3-a2492d7bc853.htm">ClearTags</a></td><td>
            Clear NurApi's internal tag storage memory from tags
            </td></tr><tr><td><a href="c149abe5-699c-47eb-e480-1c40e99ed35e.htm">ClearTagsEx</a></td><td>
            Clear NurApi's internal tag storage and RFID reader memory from tags.
            </td></tr><tr><td><a href="5dc4d42a-d174-dae1-3117-f3d9056e6853.htm">ConfigureXTIDInventory</a></td><td>
            Setup TID content based inventory + read.
            Configures inventory + read so that the data part is read based on the TID (XTID) contents.
            </td></tr><tr><td><a href="a719a73b-8df7-18dc-0c15-452be95d62a1.htm">Connect<span id="LST5C3DD375_12" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            (Re)Connect to last connected device.
            </td></tr><tr><td><a href="ffd5d40b-04b4-f087-72ef-a61378a87ddf.htm">Connect(String)</a></td><td>
            Connect to specific reader.
            </td></tr><tr><td><a href="13ea44a6-ef4b-0cb4-d62f-cd2b85525ddf.htm">Connect(Uri)</a></td><td>
            Connect to specified reader.<br />
            NurApi supportes 'tcp://' and 'mdns://' types by default.<br />
            - 'tcp' connect to reader by ip address; tcp://address[:port]<br />
            - 'mdns' connect to reader by mdns name; mdns://device_name
            <br /><br />
            Serial port and BLE transports are platform specific and require additional 
            assemblies, such as NordicID.NurApi.Android, NordicID.NurApi.SerialTransport, NordicID.NurApi.SerialTransport.UWP
            </td></tr><tr><td><a href="a1e9f362-d336-946e-a046-3f131603820f.htm">ConnectSerialPort</a></td><td>
            Connects to COM port using default baudrate (115200 bps)
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="860e29df-f0b6-8d5a-6227-1da93aaff79f.htm">ConnectSocket</a></td><td>
            Connects to reader TCP/IP socket.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="3671ba94-5392-25df-a25d-dc0071e542bf.htm">ContCarrier</a></td><td>
            Continuous carrier test setup.
            </td></tr><tr><td><a href="03b4de00-1e65-49b1-dc34-43ab5b63534e.htm">CustomCmd(Int32, <span id="LST5C3DD375_13" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_14" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Executes NUR API protocol formatted command exchange with the connected reader.
            </td></tr><tr><td><a href="8da3ecf9-dc9d-ef8f-44c2-d069135fb299.htm">CustomCmd(Int32, <span id="LST5C3DD375_15" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_16" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, <span id="LST5C3DD375_17" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_18" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST5C3DD375_19" data-languageSpecificText="cpp=%"></span>, UInt32<span id="LST5C3DD375_20" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Executes NUR API protocol formatted command exchange with the connected reader.
            </td></tr><tr><td><a href="5917129e-396b-60b4-089c-493b92850172.htm">CustomExchange(UInt32, Boolean, NurApi<span id="LST5C3DD375_21" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>CustomExchangeParams)</a></td><td>
            Exchange a custom bit stream without any singulation using the custom bit stream control structure.
            </td></tr><tr><td><a href="c13a0ca5-cd23-a04c-b38f-b4d0cc8e3ae3.htm">CustomExchange(UInt32, Boolean, UInt16, UInt16, UInt32, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, <span id="LST5C3DD375_22" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_23" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Exchange a custom bit stream without any singulation specifying all the parameters.
            </td></tr><tr><td><a href="a21e94a0-d289-8af5-3dd9-af9554c76121.htm">CustomExchangeByEPC(UInt32, Boolean, <span id="LST5C3DD375_24" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_25" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, NurApi<span id="LST5C3DD375_26" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>CustomExchangeParams)</a></td><td>
            Exchange a custom bit stream with an EPC singulated tag using the custom bit stream control structure.
            </td></tr><tr><td><a href="4a4157f2-c6d1-0f81-fffa-7e17f7353b65.htm">CustomExchangeByEPC(UInt32, Boolean, <span id="LST5C3DD375_27" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_28" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt16, UInt16, UInt32, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, <span id="LST5C3DD375_29" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_30" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Exchange a custom bit stream with an EPC singulated tag specifying all the parameters.
            </td></tr><tr><td><a href="a3c43adc-4652-5df3-c3c5-4f1f91463f1f.htm">CustomExchangeSingulated(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_31" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_32" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, NurApi<span id="LST5C3DD375_33" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>CustomExchangeParams)</a></td><td>
            Exchange a custom bit stream with a singulated tag using the custom bit stream control structure.
            </td></tr><tr><td><a href="b3f57f51-5702-861d-d6cf-088a191a5651.htm">CustomExchangeSingulated(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_34" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_35" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt16, UInt16, UInt32, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, <span id="LST5C3DD375_36" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_37" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Exchange a custom bit stream with a singulated tag specifying all the parameters.
            </td></tr><tr><td><a href="60c88a05-97b5-a024-bf15-72f7c7fced60.htm">CustomReadSingulatedTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_38" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_39" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, Byte)</a></td><td>
            Read data from tag with specific singulation, customized read command and bank parameter. 
            Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="288ec40c-5fdb-4e14-7405-7f3396b1b6aa.htm">CustomReadSingulatedTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_40" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_41" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, Int32)</a></td><td>
            Read data from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            This command uses custom read command and bank parameters.
            </td></tr><tr><td><a href="96e77f7a-b626-4c02-f680-99b9756d1e67.htm">CustomReadTag</a></td><td>
            Read data from tag without any singulation data using customized read command and bank parameters.
            This function can be used for tags that do not have an EPC.
            </td></tr><tr><td><a href="dd7f2e33-5d8b-c667-d5fe-4d7c00144e9a.htm">CustomReadTagByEPC</a></td><td>
            Read data from tag singulated by tag's EPC memory using custom read command and custom bank parameter.
            </td></tr><tr><td><a href="789546e0-0c4f-36b7-3b52-e641b77d6415.htm">CustomWriteSingulatedTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_42" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_43" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, <span id="LST5C3DD375_44" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_45" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag with specific singulation using customizable write command and bank parameter.
            Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="5fa1d08d-3457-fcbd-3cbb-1381f2bacfe8.htm">CustomWriteSingulatedTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_46" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_47" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, <span id="LST5C3DD375_48" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_49" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag with specific singulation using customizable write command and bank parameter.
            Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="f39f54ee-80f2-f159-9d0e-f4493f38c5d6.htm">CustomWriteSingulatedTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_50" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_51" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, <span id="LST5C3DD375_52" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_53" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Write data to tag with specific singulation using customizable write command and bank parameter.
            Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="822875f3-00ba-7e90-3eaa-549c4c757e09.htm">CustomWriteTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, UInt32, <span id="LST5C3DD375_54" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_55" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag without any singulation data using customizable write command and bank parameter.
            This function can be used for tags that do not have an EPC.
            <p>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</p></td></tr><tr><td><a href="5966147e-35b8-ec7c-495f-bb938420e427.htm">CustomWriteTag(UInt32, Byte, UInt32, Byte, UInt32, Boolean, UInt32, <span id="LST5C3DD375_56" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_57" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Write data to tag without any singulation data using customizable write command and bank parameter.
            This function can be used for tags that do not have an EPC.
            <p>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</p></td></tr><tr><td><a href="8b019c42-07d2-9002-4080-2e31a01c3e1e.htm">CustomWriteTagByEPC(UInt32, Byte, UInt32, Byte, UInt32, Boolean, <span id="LST5C3DD375_58" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_59" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, <span id="LST5C3DD375_60" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_61" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag singulated by tag's EPC memory using customizable write command and bank parameter.
            </td></tr><tr><td><a href="a8d4f7ad-626d-35fb-f6c7-7fb8adeba781.htm">CustomWriteTagByEPC(UInt32, Byte, UInt32, Byte, UInt32, Boolean, <span id="LST5C3DD375_62" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_63" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, <span id="LST5C3DD375_64" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_65" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Write data to tag singulated by tag's EPC memory using customizable write command and bank parameter.
            </td></tr><tr><td><a href="0d38aeaa-b9eb-0ca8-930a-46e9fd4275bd.htm">DiagGetConfig</a></td><td>
            Get current diagnostics configuration.
            </td></tr><tr><td><a href="6915739d-553c-9bad-99af-37cfdba6b8bf.htm">DiagGetReport</a></td><td>
            Get diagnostics report from module.
            </td></tr><tr><td><a href="a6c63c68-62a4-b2c6-d11c-d18205efac4f.htm">DiagSetConfig</a></td><td>
            Set new diagnostics configuration.
            </td></tr><tr><td><a href="50cbe4c9-9d15-4fa6-5986-3955b0d62c8a.htm">DisablePhysicalAntenna</a></td><td><p>This function disables the physical antennas that are specified as comma separated string parameter.</p></td></tr><tr><td><a href="1f9f0a0a-7f0a-87a3-8e35-e564921ac224.htm">Disconnect</a></td><td>
            Disconnect current transport from device
            </td></tr><tr><td><a href="e5fd7b01-57fc-19e4-b9de-1eee10627409.htm">DisconnectAsync</a></td><td>
            Disconnect device async
            </td></tr><tr><td><a href="77d3ff3a-59ff-6cb1-fb3c-299c4d978735.htm">Dispose<span id="LST5C3DD375_66" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Dispose and free all allocated resources.
            </td></tr><tr><td><a href="6d86e417-04d3-fabb-71f5-57b9760d7091.htm">Dispose(Boolean)</a></td><td> </td></tr><tr><td><a href="a54caf6e-2d31-1ac2-0662-654bb2540418.htm">DLog(Func<span id="LST5C3DD375_67" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LST5C3DD375_68" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Writes to data log.
            </td></tr><tr><td><a href="0128a8a0-cd35-e313-3324-e4e5e8fe2dce.htm">DLog(String)</a></td><td>
            Writes to data log.
            </td></tr><tr><td><a href="db5f4e0c-927e-b877-4263-cc59232c6b58.htm">ELog(Func<span id="LST5C3DD375_69" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LST5C3DD375_70" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Writes text to log using LOG_ERROR level mask.
            </td></tr><tr><td><a href="47a7321d-ed4e-ef81-0681-3604765eac98.htm">ELog(String)</a></td><td>
            Writes text to log using LOG_ERROR level mask.
            </td></tr><tr><td><a href="8569480f-952a-0c1a-3f4c-952b64ed9856.htm">EnablePhysicalAntenna</a></td><td><p>This function enables the physical antennas that are specified as comma separated string parameter.</p><p>To enable all antennas, use parameter "ALL".</p></td></tr><tr><td><a href="6b46d4e2-99c6-2201-8c7a-6815207b1aad.htm">EnterBoot</a></td><td>
            Starts bootloader or Application
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="5abdab4f-b74f-127c-17c8-9b249f8e9471.htm">EraseSingulatedTag</a></td><td>
            Erase block in a tag specifically singulated.
            </td></tr><tr><td><a href="7766f5bc-c8f3-967c-03ca-f85ff75c9be7.htm">EraseTagByEPC</a></td><td>
            Erase block in a tag singulated by EPC.
            </td></tr><tr><td><a href="4348febc-d1aa-d967-13d4-30d751deb542.htm">ExecuteCommand</a></td><td>
            Excute NUR command
            </td></tr><tr><td><a href="69c29323-8186-c967-7142-069c4fc58bca.htm">ExecuteCommandAsync</a></td><td>
            Excute NUR command asyncronously
            </td></tr><tr><td><a href="90574496-6d36-5560-4cdc-1e9973eef6e6.htm">FactoryReset</a></td><td>
            Force RFID module to factory reset
            </td></tr><tr><td><a href="fcdcb4ae-916b-8fd4-e706-ce328d1c2ade.htm">FetchTagAt</a></td><td>
            Fetch a single tag based on "index" in reader tag memory.
            </td></tr><tr><td><a href="c7cefc92-8a16-1f51-d5ca-3790e02b2bbc.htm">FetchTags<span id="LST5C3DD375_71" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Fetch tags from reader memory. Meta data of tag is included.
            </td></tr><tr><td><a href="e111b0f1-e351-5a68-e1be-0199da7d830e.htm">FetchTags(Boolean)</a></td><td>
            Fetch tags from reader memory
            </td></tr><tr><td><a href="2d82bddf-e365-349d-cf12-b19f2bf3dd60.htm">FetchTags(Boolean, Int32<span id="LST5C3DD375_72" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Fetch tags from reader memory
            </td></tr><tr><td><a href="63b63702-160c-ee88-355c-441980ad05ce.htm">Finalize</a></td><td>
            Destructor
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Object<span id="LST5C3DD375_73" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Finalize<span id="LST5C3DD375_74" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="622b976f-6566-fea1-11be-73f3b2bc3c27.htm">Gen2v2Authenticate(NurApi<span id="LST5C3DD375_75" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>AuthenticateParam)</a></td><td>
            Gen2 version 2 Authenticate command with no tag singulation in open state.
            </td></tr><tr><td><a href="b26898d1-7d81-38cc-a3ad-72dc42c30e45.htm">Gen2v2Authenticate(UInt32, NurApi<span id="LST5C3DD375_76" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>AuthenticateParam)</a></td><td>
            Gen2 version 2 Authenticate command with no tag singulation in secured state.
            </td></tr><tr><td><a href="8754349e-7834-53c9-5f4a-82d83bc7d9d8.htm">Gen2v2AuthenticateByEPC(<span id="LST5C3DD375_77" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_78" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, NurApi<span id="LST5C3DD375_79" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>AuthenticateParam)</a></td><td>
            Gen2 version 2 Authenticate command with EPC singulation singulation in open state.
            </td></tr><tr><td><a href="f3a05feb-ecb5-ef2f-e378-80d528ad1f35.htm">Gen2v2AuthenticateByEPC(UInt32, <span id="LST5C3DD375_80" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_81" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, NurApi<span id="LST5C3DD375_82" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>AuthenticateParam)</a></td><td>
            Gen2 version 2 Authenticate command with EPC singulation singulation in secured state.
            </td></tr><tr><td><a href="7c412b44-9997-29da-79eb-cd8ea6f53581.htm">Gen2v2AuthenticateSingulated(Byte, UInt32, Int32, <span id="LST5C3DD375_83" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_84" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, NurApi<span id="LST5C3DD375_85" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>AuthenticateParam)</a></td><td>
            Gen2 version 2 Authenticate command with specific singulation parameters in open state.
            </td></tr><tr><td><a href="a908f631-0692-df58-97f6-bfc39a217a20.htm">Gen2v2AuthenticateSingulated(UInt32, Byte, UInt32, Int32, <span id="LST5C3DD375_86" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_87" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, NurApi<span id="LST5C3DD375_88" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>AuthenticateParam)</a></td><td>
            Gen2 version 2 Authenticate command with specific singulation parameters in secured state.
            </td></tr><tr><td><a href="1c4114d0-01db-ad01-92e9-6a8f4c7840cf.htm">Gen2v2ReadBuffer</a></td><td><p>Gen2 version 2 ReadBuffer command without tag selection.</p><p>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</p></td></tr><tr><td><a href="4fc76c58-8dad-d57f-2fb4-17029b59367e.htm">Gen2v2ReadBufferByEPC</a></td><td><p>Gen2 version 2 ReadBuffer command with the tag being selected by its EPC contents.</p><p>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</p></td></tr><tr><td><a href="fd7c15db-ca3c-b025-6fea-06b9bd410694.htm">Gen2v2ReadBufferSingulated</a></td><td><p>Gen2 version 2 ReadBuffer command with specific tag selection.</p><p>This is similar to the regular read command but the read data source is the version 2 tag's internal buffer.</p></td></tr><tr><td><a href="a67de10f-10d5-2ee3-79e4-055e46c23b07.htm">Gen2v2Untraceable</a></td><td>
            Gen2 version 2 "Untraceable" command with no tag singulation.
            </td></tr><tr><td><a href="a053d749-d8a8-0950-c573-23ba92c7c4bd.htm">Gen2v2UntraceableByEPC</a></td><td>
            Gen2 version 2 "Untraceable" command with EPC selection.
            </td></tr><tr><td><a href="af5e5dad-858a-251f-2d1a-88faad122f51.htm">Gen2v2UntraceableSingulated</a></td><td>
            Gen2 version 2 "Untraceable" command with specific singulation parameters.
            </td></tr><tr><td><a href="aabd57aa-9adb-95d8-ae9b-0cabc797a9c4.htm">GetAccessPassword</a></td><td>
            Read access password from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="649269ad-4e51-12f5-a3fb-086adeb84047.htm">GetAccessPasswordByEPC</a></td><td>
            Read access password from specific tag singulated by tag's EPC memory. 
            </td></tr><tr><td><a href="08214cde-d41d-5180-078b-7f43535d1e7e.htm">GetAntennaIdTranslation</a></td><td><p>Returns the module's internal translation between physical antenna and logical antenna ID.</p></td></tr><tr><td><a href="5f47de0d-025c-8707-5e96-62a4f242174c.htm">GetAntennaList</a></td><td>
            List of available antennas
            </td></tr><tr><td><a href="3a73a50f-bc6c-d1a4-7a6f-a06c740f543e.htm">GetBitCount</a></td><td>
            Get count of bits set
            </td></tr><tr><td><a href="6da35002-7afd-211f-a2e2-896cc9808842.htm">GetCacheStats</a></td><td>
            Internal cache stats.
            </td></tr><tr><td><a href="b6a5ae7b-f205-4462-3e91-343613867527.htm">GetCustomHoptable</a></td><td>
            Get custom hoptable
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="ef447226-6606-0bed-cf7c-b96667a16d26.htm">GetCustomHoptableEx</a></td><td>
            Get extended custom hoptable
            </td></tr><tr><td><a href="bf6cd8dc-a0c8-7739-41dd-88a9c8cd9555.htm">GetDeviceCaps</a></td><td>
            Retrieves the device capabilities from the connected module.
            </td></tr><tr><td><a href="7cc3804b-37d3-9f77-b73e-f081602ed5a1.htm">GetEpcXpcSpec</a></td><td>
            Get the modified EPC based on the given PC contents.
            </td></tr><tr><td><a href="e6c550bb-e9d4-4750-60e7-368549b07051.htm">GetErrorMessage</a></td><td>
            Get Nur error code as string
            </td></tr><tr><td><a href="b3dd6942-8d02-57f7-4f6b-3f9db632187c.htm">GetEthConfig</a></td><td>
            Get Ethernet configuration settings from conneted device. 
            </td></tr><tr><td><a href="dc148568-8e59-8c82-1837-22b4a6017448.htm">GetFileVersion</a></td><td>
            The NurApi assembly version. Provided for compatibility, use NurApi.FileVersion instead
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="a220a7ef-b83d-d499-8653-5deb1fbc25b1.htm">GetFWINFO</a></td><td>
            Get FW building information string.
            </td></tr><tr><td><a href="d90f3870-0347-009c-b28b-7bd8cceadf6c.htm">GetGPIOConfig</a></td><td>
            Get NUR module GPIO configuration.
            </td></tr><tr><td><a href="458bd20d-824e-ca25-b942-f47f2661ee99.htm">GetGPIOStatus</a></td><td>
            Get single GPIO pin state.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="4ebbe1b5-32b9-ea8f-e57b-3a9e7195b743.htm">GetInventoryRead</a></td><td>
            Get Inventory read information.
            </td></tr><tr><td><a href="912eea4c-55f7-fb33-23ab-b073f64c9d0a.htm">GetKillPassword</a></td><td>
            Read kill password from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="d283de3c-7c5b-a39c-a722-931575c03f56.htm">GetKillPasswordByEPC</a></td><td>
            Read kill password from specific tag singulated by tag's EPC memory. 
            </td></tr><tr><td><a href="d10763e3-fcaf-dbfb-f87d-8507125a28f4.htm">GetLogFilePath</a></td><td>
            Get current log file path
            </td></tr><tr><td><a href="d06ad87f-9b1c-fbdd-c611-f26ac6d5b5f1.htm">GetLogLevel</a></td><td>
            Get Logging level
            </td></tr><tr><td><a href="6c6c6a01-eca6-5360-79dc-cc2f75f5f5af.htm">GetLogToFile</a></td><td>
            Get log to file enabled state.
            </td></tr><tr><td><a href="c2d2553d-e747-3513-5a15-5bf66f4374cf.htm">GetMode</a></td><td>
            Get running mode
            </td></tr><tr><td><a href="3ee7d6bc-e0ad-32a5-908e-00495304990a.htm">GetModuleSetup<span id="LST5C3DD375_89" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Get current module setup
            </td></tr><tr><td><a href="a3713f9b-3fd3-a881-db7b-43099c8cadef.htm">GetModuleSetup(Int32)</a></td><td>
            Get current module setup
            </td></tr><tr><td><a href="0dce45b6-ac8b-ac38-b08f-01bc445eb562.htm">GetPhysicalAntennaMask</a></td><td>
            This function generates an antennaMask value from the passed physical antenna names. If parameter is invalid, an exception will be thrown
            </td></tr><tr><td><a href="32eedc1c-f71b-5db1-5c55-89c16e297079.htm">GetReaderInfo</a></td><td>
            Get reader info
            </td></tr><tr><td><a href="632a6b3a-22b9-4e64-645a-36053a9577a2.htm">GetReflectedPower<span id="LST5C3DD375_90" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Get antenna reflected power info
            </td></tr><tr><td><a href="fcc137be-2d54-9c60-8617-af9f6c1f75bc.htm">GetReflectedPower(UInt32)</a></td><td>
            Get antenna reflected power info for specific frequency
            </td></tr><tr><td><a href="ae99bcfb-37bc-f233-c051-74e8ff5d63d2.htm">GetReflectedPowerValue<span id="LST5C3DD375_91" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Get the reflected power as a floating point value from current region middle channel's frequency.
            </td></tr><tr><td><a href="076f11c2-36ae-96bf-60f0-720cddad7b87.htm">GetReflectedPowerValue(UInt32)</a></td><td>
            Returns the reflected power value for given frequency.
            A return value of -100 indicates that no reflected power was detected. This may indicate broken or bad antenna connection.
            </td></tr><tr><td><a href="17ce5e1a-9b58-3436-b13f-50c095839cd1.htm">GetRegionInfo</a></td><td>
            Get region info
            </td></tr><tr><td><a href="07e3209d-992e-8010-359e-dd6ab289dcb2.htm">GetSecChipFWINFO</a></td><td>
            Get secondary chip FW building information string.
            </td></tr><tr><td><a href="ae149f8f-d37b-2a76-e276-6b6fba1f6a46.htm">GetSensorConfig</a></td><td>
            Get sensor configuration
            </td></tr><tr><td><a href="bb96198b-ef1c-25e4-3a02-b14f95785f3f.htm">GetSystemInfo</a></td><td>
            Get system information.
            </td></tr><tr><td><a href="5f84880d-64f9-0f3a-64ed-74bf0fab41a6.htm">GetTagStorage</a></td><td>
            Get NurApi's internal tag storage.
            </td></tr><tr><td><a href="29a31b7b-4cda-6d23-0320-8f4c7db627fd.htm">GetTimeStamp</a></td><td>
            Get milliseconds after NurApi initialized
            </td></tr><tr><td><a href="3ea3a8c9-f466-fd22-cb15-c9e06149703a.htm">GetTransportStats</a></td><td>
            Internal transport stats.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="5f22eb0a-bf9d-6d50-d760-5f5541f9be5f.htm">GetVersions</a></td><td>
            Returns the current mode, primary and secondary version information.
            </td></tr><tr><td><a href="370c22d4-82cd-3f34-cf61-001f78db440c.htm">HexStringToBin(String)</a></td><td>
            Converts hex string to byte array.
            </td></tr><tr><td><a href="a45a0c7b-a3b5-246d-970d-b51d9beb5bb7.htm">HexStringToBin(String, String)</a></td><td>
            Converts hex string to byte array
            </td></tr><tr><td><a href="fd799331-b9b8-9093-312d-21e68f6a6415.htm">Inventory<span id="LST5C3DD375_92" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Perform single tag inventory.<br />
            This function uses rounds, Q and session values from current module settings.
            <p>
            How it works:
            </p><p>
            The inventory operation returns information about the last inventory; it does not return tags.
            The inventory response <a href="c559e065-8b8f-6332-9593-62e3fa38e8b4.htm">NurApi<span id="LST5C3DD375_93" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryResponse</a> contains namely the number of tags that were found during last inventory and the number of tags that are stored into the module's memory.
            After exeuting an inventory the tags need to be first retrieved from the module by calling <a href="c7cefc92-8a16-1f51-d5ca-3790e02b2bbc.htm">FetchTags<span id="LST5C3DD375_94" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> or <a href="2d82bddf-e365-349d-cf12-b19f2bf3dd60.htm">FetchTags(Boolean, Int32<span id="LST5C3DD375_95" data-languageSpecificText="cpp=%"></span>)</a> and after that 
            the tags are available in the NurApi's tag storage, <a href="6b3b097f-a9d5-38ff-d6d7-17d2079008be.htm">NurApi<span id="LST5C3DD375_96" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>TagStorage</a> that can be retrieved by the get tags storage command, see <a href="5f84880d-64f9-0f3a-64ed-74bf0fab41a6.htm">GetTagStorage<span id="LST5C3DD375_97" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>.
            If the inventory needs to be "clean" the method for clearing the module's is <a href="c149abe5-699c-47eb-e480-1c40e99ed35e.htm">ClearTagsEx<span id="LST5C3DD375_98" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>. Calling this method also clears the NurApi's tag storage and module tag storage.
            </p></td></tr><tr><td><a href="2d46aab3-3a55-51d0-2fb4-cdab7ee7fe26.htm">Inventory(Int32, Int32, Int32)</a></td><td>
            Perform single inventory using specified rounds, Q  and session.
            <p>What inventory actually returns, see <a href="fd799331-b9b8-9093-312d-21e68f6a6415.htm">Inventory<span id="LST5C3DD375_99" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>'s summary.</p></td></tr><tr><td><a href="4df50f2e-56e0-aa12-b567-e2d8a0e92fd5.htm">InventoryEx<span id="LST5C3DD375_100" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Re-run the extended inventory assuming that the module has stored the parameters earlier.
            </td></tr><tr><td><a href="8e7331a5-fb39-de80-2b85-64dc8e692d43.htm">InventoryEx(NurApi<span id="LST5C3DD375_101" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExParams, <span id="LST5C3DD375_102" data-languageSpecificText="cpp=array&lt;"></span>NurApi<span id="LST5C3DD375_103" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExFilter<span id="LST5C3DD375_104" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Extended inventory command with multiple select filters.
            </td></tr><tr><td><a href="e5a6ca73-1e03-8538-fb5e-a1038252c949.htm">InventoryEx(NurApi<span id="LST5C3DD375_105" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExParams<span id="LST5C3DD375_106" data-languageSpecificText="cpp=%"></span>, <span id="LST5C3DD375_107" data-languageSpecificText="cpp=array&lt;"></span>NurApi<span id="LST5C3DD375_108" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExFilter<span id="LST5C3DD375_109" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Extended inventory command with multiple select filters.
            </td></tr><tr><td><a href="56c02dc8-2092-95b1-57cd-94dcfc97a8cd.htm">InventoryRead</a></td><td>
            Setup inventory + read data.
            Call to this method only configures the inventory + read; it does not start it itself.
            This means that the inventory + read is done use during the next call to e.g. <a href="fd799331-b9b8-9093-312d-21e68f6a6415.htm">Inventory<span id="LST5C3DD375_110" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> or <a href="2d46aab3-3a55-51d0-2fb4-cdab7ee7fe26.htm">Inventory(Int32, Int32, Int32)</a>.
            </td></tr><tr><td><a href="15ea8f7a-a178-3546-1f3f-8a5326bbe19e.htm">InventorySelect</a></td><td>
            Perform single inventory command with specific tag singulation. 
            <p>Tags can be singluted against desired memory bank and data mask.</p><p>What inventory actually returns, see <a href="fd799331-b9b8-9093-312d-21e68f6a6415.htm">Inventory<span id="LST5C3DD375_111" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>'s summary.</p></td></tr><tr><td><a href="7223396c-705e-eb8e-4eb2-bc4963f209ca.htm">InventorySelectByEPC</a></td><td>
            Perform single inventory command with tag singulated against EPC. 
            <p>What inventory actually returns, see <a href="fd799331-b9b8-9093-312d-21e68f6a6415.htm">Inventory<span id="LST5C3DD375_112" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>'s summary.</p></td></tr><tr><td><a href="d7497ba2-ab9d-cd38-8695-8eda422ac4d3.htm">IsConnected</a></td><td>
            This function will return only connection state of the transport layer.
            In order to know that module is responding, you'll need to communicate with module by calling e.g. <a href="973255b9-5e67-163c-edca-70a14a156a7b.htm">Ping<span id="LST5C3DD375_113" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>.
            </td></tr><tr><td><a href="49443cdd-331a-4f1a-356e-6bd42b8fe0b2.htm">IsInventoryExRunning</a></td><td>
            Return true if streaming extended inventory routine is running.
            </td></tr><tr><td><a href="0f750991-a13a-1337-3977-6d0abd168eb1.htm">IsInventoryStreamRunning</a></td><td>
            Check if inventory stream routine is running.
            </td></tr><tr><td><a href="6e97a003-adb6-1998-aae6-fc81fe2bde51.htm">IsNXPAlarmStreamRunning</a></td><td>
            Return true if EAS Alarm stream routine is running on module.
            </td></tr><tr><td><a href="bdfd8194-a6ff-f97e-e2ee-55ed395f2da6.htm">IsPhysicalAntennaEnabled</a></td><td><p>This function returns true if all physical antennas specified in comma separated string are enabled, otherwise false is returned.</p></td></tr><tr><td><a href="fda1baaa-eca7-d8b9-3ab0-155fc79545ec.htm">IsTagError</a></td><td>
            Returns whether the given error is a tag backscattered error or not.
            </td></tr><tr><td><a href="68e0aedd-360c-2f9f-744c-765f43d4ffa8.htm">IsTraceRunning</a></td><td>
            Return TRUE if tag trace routine is running on module. 
            </td></tr><tr><td><a href="450f41ff-1460-ee64-f026-d8da8d71afa3.htm">KillTag</a></td><td>
            Kill tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="241bfd9a-4958-dab2-8180-b6d3c0a0bfbc.htm">KillTagByEPC</a></td><td>
            Kill specific tag singulated by tag's EPC memory.
            </td></tr><tr><td><a href="11c94586-2ab0-cca4-38a3-de17aa55767f.htm">Log(Int32, Func<span id="LST5C3DD375_114" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LST5C3DD375_115" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Writes text to log for specified level.
            </td></tr><tr><td><a href="946eaf4b-807b-ecab-3f4e-c2fe73e0bfd1.htm">Log(Int32, String)</a></td><td>
            Writes text to log for specified level.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="131b0635-1c6d-cbe3-84f0-52a4ab684bde.htm">MemCompare</a></td><td>
            Comparing memory
            </td></tr><tr><td><a href="fdd17833-0987-bb25-038d-82b19b092e0d.htm">ModuleRestart</a></td><td>
            Force RFID module restart
            </td></tr><tr><td><a href="b7b622ea-a336-69ab-0f7a-63a44178882c.htm">Monza4QTRead</a></td><td>
            Monza4 QT command. Reads the QT_SR bit to <span class="parameter">reduce</span> and QT_MEM bit to <span class="parameter">pubmem</span>  .
            </td></tr><tr><td><a href="05a09b39-3844-a72b-b2ca-1569ca0a76bb.htm">Monza4QTWrite</a></td><td>
            Monza4 QT command. Writes the QT_SR and QT_MEM bits.
            </td></tr><tr><td><a href="93c90b6e-3eb1-a766-ee10-2a33a654ec0c.htm">NurAntennaIdToPhysicalAntenna</a></td><td><p>This function maps given logical antenna identifier to a physical name of an antenna.</p></td></tr><tr><td><a href="30db45d7-628a-28b3-d8e8-9dde895d9636.htm">NurPhysicalAntennaToAntennaId</a></td><td><p>This function maps given physical antenna name to an logical antenna identifier.</p></td></tr><tr><td><a href="fb332468-d352-e53f-9227-78d82a298203.htm">NXPAlarm</a></td><td>
            Send NXP EAS Alarm command. Return true when there's armed EAS tags in range of reader.
            </td></tr><tr><td><a href="81cbd94f-58ba-e516-6076-691195779018.htm">NXPResetEAS</a></td><td>
            Reset specific tag's EAS alarm bit to 0 with given singulation data. 
            When tag's EAS alarm bit is set to 1, tag will reply to EAS Alarm command.
            </td></tr><tr><td><a href="2bb00491-03e2-37ea-c177-f7a85b09ba95.htm">NXPResetReadProtect</a></td><td>
            Reset specific tag's read protect with given singulation data. 
            </td></tr><tr><td><a href="4945616c-644a-e95d-9303-837e15c9999e.htm">NXPSetEAS</a></td><td>
            Set specific tag's EAS alarm bit to 1 with given singulation data. 
            When tag's EAS alarm bit is set to 1, tag will reply to EAS Alarm command.
            </td></tr><tr><td><a href="1e291105-4e7c-43db-549d-12b50a42ec18.htm">NXPSetReadProtect</a></td><td>
            Set specific tag's read protect with given singulation data. 
            </td></tr><tr><td><a href="a7948dec-852f-cdce-8998-9701636a2bee.htm">NXPStartAlarmStream</a></td><td>
            Start NXP EAS Alarm streaming on module.
            Module will start continuos EAS Alarm stream and sends notification to host when there's armed tags in range.
            </td></tr><tr><td><a href="cedaa8cd-aeea-f830-1020-a65bbd01ca68.htm">NXPStopAlarmStream</a></td><td>
            Stop EAS Alarm streaming on module.
            </td></tr><tr><td><a href="e4478919-07de-d9a9-b8b0-a8a90e94778a.htm">OnApiConnectionStatusChanged</a></td><td> </td></tr><tr><td><a href="d89e5ca1-fcd8-38bb-b934-5a0c34b35f77.htm">OpenStateLock</a></td><td>
            Set tag lock using specified singulation parameters.
            Lock is done in open state i.e. without using password access.
            </td></tr><tr><td><a href="911ae61d-c950-93f4-7093-a054f3e0cf2d.htm">OpenStateLockByEPC</a></td><td>
            Set tag lock singulating it by the EPC contents.
            Lock is done in open state i.e. without using password access.
            </td></tr><tr><td><a href="c5084249-0e18-16af-ddcd-7ce318878fd1.htm">OpenStateLockRaw</a></td><td>
            Set memory lock for tag with specific singulation in open state i.e. without password access.
            <p>Tag can be singluted against desired memory bank and mask.</p><p>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</p></td></tr><tr><td><a href="973255b9-5e67-163c-edca-70a14a156a7b.htm">Ping</a></td><td>
            Performs ping to connected RFID module 
            </td></tr><tr><td><a href="f12c4fdc-010a-d86a-6351-f6286ff6ef00.htm">ReadPermalock</a></td><td>
            Read block permalock statuses without selecting a tag.
            Assume one tag in field.
            </td></tr><tr><td><a href="21255eca-cc1e-7606-4a34-b654e1525c4e.htm">ReadPermalockByEPC</a></td><td>
            Read block permalock statuses by selecting the tag by its EPC.
            </td></tr><tr><td><a href="64291ee6-492e-0498-ff2b-b1c1d29db9d0.htm">ReadPermalockSingulated</a></td><td>
            Read block permalock statuses by selecting the tag with specific singulation data.
            </td></tr><tr><td><a href="9a6f57d5-0bc1-a500-fbad-d1e09ebdb839.htm">ReadSingulatedTag(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_116" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_117" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, Byte)</a></td><td>
            Read data from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="fc898b8d-30d9-91da-87ce-8c0d82e2cd8d.htm">ReadSingulatedTag(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_118" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_119" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, Int32)</a></td><td>
            Read data from tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="0e222096-988e-1351-e43f-9881dd374e59.htm">ReadTag</a></td><td>
            Read data from tag without any singulation data. This function can be used for tags that do not have an EPC.
            </td></tr><tr><td><a href="4ecaa760-6a56-dc49-0b25-1a1eb9b3be69.htm">ReadTagByEPC</a></td><td>
            Read data from tag singulated by tag's EPC memory.
            </td></tr><tr><td><a href="0e97149e-9eb3-e3ef-7be1-78085d868afc.htm">ResetToTarget</a></td><td>
            Reset tag inventoried flag to specific target in selected session.
            All tags in reader range will be reset.
            </td></tr><tr><td><a href="3e186fdf-d944-5fc6-bb64-5d5f8579cd4b.htm">RestartBLEModuleToDFU</a></td><td>
            Restart the BLE module to DFU (Device Firmware Upgrade) mode.<br />
            After the call, another application or built-in updater can upgrade the BLE module's FW.
            </td></tr><tr><td><a href="2d3db808-2b4f-79e5-54a1-3015c868e92b.htm">RestoreTuning</a></td><td>
            Restores the factory tuning to the module.
            Applies only to the NUR05WL2 and NUR10W modules.
            </td></tr><tr><td><a href="181bc453-d708-42de-0cfc-bd5543da006a.htm">ScanChannels<span id="LST5C3DD375_120" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Scan region channels RSSI
            </td></tr><tr><td><a href="8f2559d6-3a83-4b14-e4f8-66d4b648d394.htm">ScanChannels(Int32)</a></td><td>
            Scan region channels RSSI
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="0f52f06a-c966-436b-f74f-9c7b863796b6.htm">ScanSingle</a></td><td>
            The single scan is used to read a single tag's EPC contents using a timeout defined in milliseconds.
            </td></tr><tr><td><a href="8fe1f372-e9b5-4dec-3544-e48578b1241a.htm">SetAccessPassword(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_121" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_122" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Write new access password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="790c258d-b6b2-dac0-69b3-067e989adda0.htm">SetAccessPassword(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_123" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_124" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Write new access password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="e9004590-ac69-7486-d7a2-7659326b131d.htm">SetAccessPasswordByEPC</a></td><td>
            Write new access password to specific tag singulated by tag's EPC memory.
            </td></tr><tr><td><a href="76a17b09-299c-39a6-151d-15fbd6337f79.htm">SetAntennaIdTranslation</a></td><td><p>A method to change the module's internal mapping between the physsical and logical antenna identifiers.</p></td></tr><tr><td><a href="0f6ef412-c6ef-98ae-10bd-a13f4fc034b3.htm">SetConstantChannelIndex</a></td><td>
            Set channel index to use in current hop table.
            This prevents NUR from hopping in different channel.
            Use with care: RF frequency is locked as long as this is set.
            Restore normal channel hopping with parameter -1
            </td></tr><tr><td><a href="bfb4efa1-8f55-1f3b-a96d-873d78fc1054.htm">SetCustomHoptable</a></td><td>
            Set pre-built custom hop table.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="e64a924f-ba6d-6230-0fa6-84986da042a2.htm">SetCustomHoptableEx</a></td><td>
            Set pre-built, extended custom hop table (+LBT threshold and maximum TX level).
            </td></tr><tr><td><a href="9101d11e-adad-33ab-0e49-36a49d82e57e.htm">SetEthConfig</a></td><td>
            Set Ethernet device configuration.
            </td></tr><tr><td><a href="3b567526-34e2-b891-712a-50bdde13d663.htm">SetExtendedCarrier</a></td><td>
            Causes the module to leave carrier on after a command and not to jump to new frequency.
            The carrier on time is limited by the maximum channel time.
            </td></tr><tr><td><a href="366cdbdb-9466-061c-545c-75e5a9a91526.htm">SetGPIOConfig</a></td><td>
            Set NUR module GPIO configuration.
            </td></tr><tr><td><a href="efcda781-7de8-dee5-4178-1760337d4a44.htm">SetGPIOStatus</a></td><td>
            Set single GPIO pin state.
            <b>NOTE: GPIO must be configured as output</b></td></tr><tr><td><a href="43711d46-c33a-db8a-bf1f-2d30a78eaee1.htm">SetGPIOStatusMask</a></td><td>
            Set state for Gpio's specified by gpioMask<br />
            For example: value 0x50 set state for GPIO5 and GPIO7
            </td></tr><tr><td><a href="d298ec46-11e1-fc3a-c261-32b86082c29c.htm">SetHostFlags</a></td><td>
            Sends host flags to the module.
            </td></tr><tr><td><a href="f8e464ac-b922-f22b-8c91-749b5d37d341.htm">SetInventoryRead</a></td><td>
            Set Inventory read configuration.
            </td></tr><tr><td><a href="47fdee8e-9948-d2a4-48d5-762c5b1dc3f2.htm">SetKillPassword(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_125" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_126" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Write new kill password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="b2586a48-0928-67a7-0b4c-0defecb2af85.htm">SetKillPassword(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_127" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_128" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32)</a></td><td>
            Write new kill password to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="e1f8c824-cf54-34f0-b5cd-5eb9f2fb015a.htm">SetKillPasswordByEPC</a></td><td>
            Write new kill password to specific tag singulated by tag's EPC memory. 
            </td></tr><tr><td><a href="7cf1a7ad-8e71-7fe4-bacd-2177aa66b359.htm">SetLock(UInt32, Byte, UInt32, <span id="LST5C3DD375_129" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_130" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Set memory lock for tag with specific singulation.
            </td></tr><tr><td><a href="c64bb363-0d11-2d74-3c0f-d1e861bd735b.htm">SetLock(UInt32, Byte, UInt32, Int32, <span id="LST5C3DD375_131" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_132" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Set memory lock for tag with specific singulation.
            <p>Tag can be singluted against desired memory bank and mask.</p></td></tr><tr><td><a href="9615f8a9-81cf-25b9-b919-6dddaec35ba3.htm">SetLockByEPC</a></td><td>
            Set memory lock for specific tag singulated by tag's EPC memory. 
            </td></tr><tr><td><a href="b98b4537-c8b3-0152-7b34-992855432e79.htm">SetLockRaw(UInt32, Byte, UInt32, <span id="LST5C3DD375_133" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_134" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Set memory lock for tag with specific singulation.
            <p>Tag can be singluted against desired memory bank and mask.</p><p>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</p></td></tr><tr><td><a href="f38ba25a-0057-03c7-cf0e-6675fedc2044.htm">SetLockRaw(UInt32, Byte, UInt32, Int32, <span id="LST5C3DD375_135" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_136" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, UInt32, UInt32)</a></td><td>
            Set memory lock for tag with specific singulation.
            <p>Tag can be singluted against desired memory bank and mask.</p><p>Lock mask and action parameter are in raw format defined in UHF C1G2 standard section "6.3.2.11.3.5 Lock (mandatory).</p></td></tr><tr><td><a href="7743997b-4417-b833-a759-93f7d7058db5.htm">SetLogFilePath</a></td><td>
            Set Log file path<br />     
            See <a href="8cee064a-5861-0833-97a3-c993fcabd648.htm">SetLogToFile(Boolean)</a></td></tr><tr><td><a href="00cb7d2a-35e0-0f3f-e53d-cde8c81b1900.htm">SetLogLevel</a></td><td>
            Set Logging level
            </td></tr><tr><td><a href="8cee064a-5861-0833-97a3-c993fcabd648.htm">SetLogToFile</a></td><td>
            Enables log generation to file. Default is "NurApiLog.txt" in to app working folder<br /> 
            To set path use <a href="7743997b-4417-b833-a759-93f7d7058db5.htm">SetLogFilePath(String)</a></td></tr><tr><td><a href="0b19116c-e968-49a3-9e23-a79bc40be0c9.htm">SetLogToStdout</a></td><td>
            Set log to stdout.
            </td></tr><tr><td><a href="0908acc9-7787-b263-3863-1c469642e09c.htm">SetModuleSetup</a></td><td>
            Set module settings according to given flags.
            </td></tr><tr><td><a href="75be04c6-aae6-123a-ab94-692efc4c62a5.htm">SetSensorConfig</a></td><td>
            Set sensor configuration
            </td></tr><tr><td><a href="8e75591e-1389-b1de-6ec0-ff4f5db30145.htm">SimpleInventory</a></td><td>
            Use <a href="fd799331-b9b8-9093-312d-21e68f6a6415.htm">Inventory<span id="LST5C3DD375_137" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> instead.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="e5efe05d-e4af-9dd2-8fcf-7d49a17ec886.htm">StartInventoryEx(NurApi<span id="LST5C3DD375_138" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExParams, <span id="LST5C3DD375_139" data-languageSpecificText="cpp=array&lt;"></span>NurApi<span id="LST5C3DD375_140" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExFilter<span id="LST5C3DD375_141" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Start extended inventory streaming command with multiple select filters.
            </td></tr><tr><td><a href="70fc9861-f190-4d1d-dcdd-99cade37efc0.htm">StartInventoryEx(NurApi<span id="LST5C3DD375_142" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExParams<span id="LST5C3DD375_143" data-languageSpecificText="cpp=%"></span>, <span id="LST5C3DD375_144" data-languageSpecificText="cpp=array&lt;"></span>NurApi<span id="LST5C3DD375_145" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>InventoryExFilter<span id="LST5C3DD375_146" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Start extended inventory streaming command with multiple select filters.
            </td></tr><tr><td><a href="4a2f56e7-d30d-1cd3-08aa-5f45dd39a7e7.htm">StartInventoryStream</a></td><td>
            Start inventory stream using RFID reader current rounds, Q, session settings. <a href="fadcc470-ff69-d538-b5a9-f5d74be7a9d0.htm">InventoryStreamEvent</a> is fired when data available. To stop inventory stream use <a href="62313e6d-1331-e22a-7f7e-b6e29ccc310e.htm">StopInventoryStream<span id="LST5C3DD375_147" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td></tr><tr><td><a href="db8f636a-5c70-56c0-6029-26d4ce841ea1.htm">StopContCarrier</a></td><td>
            Stop continuous carrier test.
            </td></tr><tr><td><a href="ee9e6292-a941-553d-196a-4cfbf0f6c05e.htm">StopContinuous</a></td><td>
            Force stop all NUR module running continuous functions.
            </td></tr><tr><td><a href="ad862713-3f59-1030-f79d-c41ac5cda8b7.htm">StopInventoryEx</a></td><td>
            Stop extended inventory streaming in module.
            </td></tr><tr><td><a href="62313e6d-1331-e22a-7f7e-b6e29ccc310e.htm">StopInventoryStream</a></td><td>
            Stop inventory streaming on module. 
            </td></tr><tr><td><a href="c792b921-b348-080c-02af-f46fa3e8fbc9.htm">StoreCurrentSetup<span id="LST5C3DD375_148" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Store current module settings to the reader's non-volatile memory.
            </td></tr><tr><td><a href="e5b6f098-cda7-a658-cb86-cf47cf35bdc0.htm">StoreCurrentSetup(Int32)</a></td><td>
            Store current module setup. Flags indicate which part of settings will be stored.
            </td></tr><tr><td><a href="a0ebb93f-95bd-f7a2-21b6-3a8607fa521b.htm">SwapEndian(UInt16)</a></td><td>
            Swap endianess of 16-bit value
            </td></tr><tr><td><a href="4d7b2d66-faed-f9f6-093c-2684944ba3c9.htm">SwapEndian(UInt32)</a></td><td>
            Swap endianess of 32-bit value
            </td></tr><tr><td><a href="d1b8c820-5d0e-77b5-74df-11fbc596b212.htm">TIDInventory</a></td><td>
            Setup TID inventory.
            Configures inventory + read so that it result only in TID data.
            </td></tr><tr><td><a href="4818a912-2dec-b724-6bc8-780992adb20e.htm">TimeStampToDate</a></td><td>
            Convert NurApi timestamp to DateTime
            </td></tr><tr><td><a href="b619c862-eece-1679-f7c6-b682b7ae0c23.htm">TimeStampToDateUtc</a></td><td>
            Convert NurApi timestamp to UTC DateTime
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="813696c5-98bd-99c8-7804-047d2d068cf2.htm">TraceTag</a></td><td>
            Trace singulated single tag. 
            </td></tr><tr><td><a href="076466f3-cde2-d571-8f44-bb01e21951d0.htm">TraceTagByEPC</a></td><td>
            Trace single tag singluated against tag's EPC memory.
            </td></tr><tr><td><a href="55cdf417-9bbe-aaa6-0dc0-1dac6fdc53bf.htm">TuneAntenna</a></td><td>
            Executes antenna tune sequence.
            </td></tr><tr><td><a href="ce31be4e-5686-6f39-fe52-c02d3463c9bd.htm">ULog(Func<span id="LST5C3DD375_149" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LST5C3DD375_150" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Writes text to log using LOG_USER level mask.
            </td></tr><tr><td><a href="aa0f0647-67ca-da3b-23a5-c3b709045779.htm">ULog(String)</a></td><td>
            Writes text to log using LOG_USER level mask.
            </td></tr><tr><td><a href="81972e31-1dcd-0f57-b8c3-2a49c785dac9.htm">UserMemInventory</a></td><td>
            Setup user memory inventory.
            Configures inventory + read so that it result only in user memory data.
            </td></tr><tr><td><a href="017b8fff-6b3a-9f84-d7b5-50daa4c8062b.htm">VLog(Func<span id="LST5C3DD375_151" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LST5C3DD375_152" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Writes text to log using LOG_VERBOSE level mask.
            </td></tr><tr><td><a href="0e25eabb-8a73-af1e-94a8-a2f622164a7f.htm">VLog(String)</a></td><td>
            Writes text to log using LOG_VERBOSE level mask.
            </td></tr><tr><td><a href="e4451cde-e162-b219-c39d-7505223c4a54.htm">WriteEPC</a></td><td>
            Write new EPC to tag with specific singulation.This function sets also tag PC word correctly for new EPC length. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="ea694913-efe8-300d-c173-fbc4a03fcfb2.htm">WriteEPCByEPC(UInt32, Boolean, <span id="LST5C3DD375_153" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_154" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST5C3DD375_155" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_156" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write new EPC to specific tag singulated by tag's EPC memory. 
            </td></tr><tr><td><a href="af91f115-e30f-f13a-44e8-992ce36dc726.htm">WriteEPCByEPC(UInt32, Boolean, String, String)</a></td><td>
            Write new EPC to specific tag singulated by tag's EPC memory. 
            </td></tr><tr><td><a href="bb66eb4d-1ae8-6aa6-80d0-53189b9a962e.htm">WriteSingulatedTag(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_157" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_158" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_159" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_160" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="caa0d9b7-b4b6-5364-d2d4-357adf024f0a.htm">WriteSingulatedTag(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_161" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_162" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_163" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_164" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="090618c6-3492-7d23-64ac-00f621c962cc.htm">WriteSingulatedTag(UInt32, Boolean, Byte, UInt32, Int32, <span id="LST5C3DD375_165" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_166" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_167" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_168" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Write data to tag with specific singulation. Tag can be singluted against desired memory bank and mask.
            </td></tr><tr><td><a href="cde1fd65-2bac-dd13-a1b0-20e24426ee5c.htm">WriteTag(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_169" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_170" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag without any singulation data. This function can be used for tags that do not have an EPC.
            <p>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</p></td></tr><tr><td><a href="84dfe386-09e8-b2be-1fb8-3d3f0eee7276.htm">WriteTag(UInt32, Boolean, Byte, UInt32, <span id="LST5C3DD375_171" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_172" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Write data to tag without any singulation data. This function can be used for tags that do not have an EPC.
            <p>Note:If there's more than one tag in range, this function will most likely fail due to the RF collision.</p></td></tr><tr><td><a href="0cbe7c32-dcca-f6e1-8c56-d8a42841f59a.htm">WriteTagByEPC(UInt32, Boolean, <span id="LST5C3DD375_173" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_174" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_175" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_176" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Write data to tag singulated by tag's EPC memory.         
            </td></tr><tr><td><a href="ed0986b4-2866-47ab-8a13-ba5f4bc149ca.htm">WriteTagByEPC(UInt32, Boolean, <span id="LST5C3DD375_177" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_178" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Byte, UInt32, <span id="LST5C3DD375_179" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST5C3DD375_180" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Write data to tag singulated by tag's EPC memory.         
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="1902b97f-38f5-bf7f-4e66-55bf65e24f9a.htm">NurApi Class</a></div><div><a href="29411023-0052-089d-f65f-b19dc7aea29c.htm">NurApiDotNet Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>